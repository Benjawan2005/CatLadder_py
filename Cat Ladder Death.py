import tkinter as tk
from tkinter import messagebox, simpledialog, colorchooser
import random   
import time

# ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
players = []  # ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
positions = []  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
player_colors = []  # ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
current_player = 0  # ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
cats = {}  # ‡πÅ‡∏°‡∏ß
ladders = {}  # ‡∏ö‡∏±‡∏ô‡πÑ‡∏î

def generate_cats_and_ladders():  #‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏°‡∏ß‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
    global cats, ladders
    cat_starts = random.sample(range(2, 100), 9)  # ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏°‡∏ß
    ladder_starts = random.sample([i for i in range(2, 100) if i not in cat_starts], 9)  # ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡πÅ‡∏°‡∏ß
    
    cats = {start: random.randint(1, start - 1) for start in cat_starts}
    ladders = {start: random.randint(start + 1, 100) for start in ladder_starts}

def setup_game(): 
    generate_cats_and_ladders()  # ‡∏™‡∏∏‡πà‡∏°‡πÅ‡∏°‡∏ß‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡πÄ‡∏Å‡∏°
    num_players = simpledialog.askinteger("‡∏Ç‡∏≠‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏´‡∏ô‡∏π‡πÑ‡∏î‡πâ‡∏°‡∏±‡πâ‡∏¢‡∏Ñ‡∏∞", "‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (1-4):", minvalue=1, maxvalue=4)
    if not num_players:
        root.destroy()
        return

    for i in range(num_players):
        name = simpledialog.askstring("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô", f"‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏´‡∏ô‡∏π‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà {i + 1}:")
        players.append(name if name else f"‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô {i + 1}")
        positions.append(1)  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á 1 ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
        
        # ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
        color = colorchooser.askcolor(title=f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏´‡∏ô‡∏π {players[-1]}")[1]
        player_colors.append(color if color else "#ffcc99")  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

    label_status.config(text=f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°!‡∏Ñ‡∏∏‡∏ì‡∏´‡∏ô‡∏π {players[0]} ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô")
    update_board()

def roll_dice():
    dice1 = random.randint(1, 6)
    dice2 = random.randint(1, 6)
    total = dice1 + dice2
    label_dice.config(text=f"üò∫ ‡πÄ‡∏Ç‡∏¢‡πà‡∏≤‡πÅ‡∏°‡∏ß: {dice1} + {dice2} = {total}")
    move_player(total)

def move_player(steps): #‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    global current_player
    old_position = positions[current_player]
    new_position = old_position + steps

    if new_position > 100:
        label_status.config(text=f"‡∏´‡∏ß‡πâ‡∏≤!‡∏Ñ‡∏∏‡∏ì‡∏´‡∏ô‡∏π {players[current_player]} ‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡∏¥‡∏ô 100! ‡∏ñ‡∏≠‡∏¢‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞")
        time.sleep(2)
        new_position = 100 - (new_position - 100) 
    
    for _ in range(abs(new_position - old_position)):
        if positions[current_player] < 100:
            if new_position > old_position:
                positions[current_player] += 1
            else:
                positions[current_player] -= 1
            update_board()
            root.update()
            time.sleep(0.2)

    check_special_position()

    if positions[current_player] == 100:
        messagebox.showinfo("‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏´‡∏ô‡∏π!", f"üéâ‡∏Ñ‡∏∏‡∏ì‡∏´‡∏ô‡∏π {players[current_player]} ‡πÄ‡∏™‡∏µ‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏ô‡∏≤‡∏ô!")
        button_roll.config(state="disabled")
    else:
        current_player = (current_player + 1) % len(players)
        label_status.config(text=f"‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏ô‡∏π {players[current_player]}")

def check_special_position(): 
    pos = positions[current_player]

    if pos in cats:
        new_pos = cats[pos]
        positions[current_player] = new_pos
        label_status.config(
            text=f"‡πÇ‡∏≠‡πâ‡πÑ‡∏°‡πà‡∏ô‡∏∞! ‡∏Ñ‡∏∏‡∏ì‡∏´‡∏ô‡∏π {players[current_player]} ‡πÄ‡∏à‡∏≠‡πÅ‡∏°‡∏ß‡∏Ç‡∏µ‡πâ‡πÇ‡∏°‡πÇ‡∏´! ‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á {pos} ‡πÑ‡∏õ‡∏ä‡πà‡∏≠‡∏á {new_pos}"
        )
        update_board()
        root.update()
        time.sleep(3.5)

    elif pos in ladders:
        new_pos = ladders[pos]
        positions[current_player] = new_pos
        label_status.config(
            text=f"‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î! ‡∏Ñ‡∏∏‡∏ì‡∏´‡∏ô‡∏π {players[current_player]} ‡πÄ‡∏à‡∏≠‡∏ö‡∏±‡∏ô‡πÑ‡∏î! ‡∏õ‡∏µ‡∏ô‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á {pos} ‡πÑ‡∏õ‡∏ä‡πà‡∏≠‡∏á {new_pos}"
        )
        update_board()
        root.update()
        time.sleep(3.5)

    update_board()

def update_board():
    colors = ["#262626", "#333333", "#1a1a1a"]  # ‡∏™‡∏µ‡πÇ‡∏ó‡∏ô‡πÄ‡∏Ç‡πâ‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á (‡∏ò‡∏µ‡∏°‡∏î‡∏≥)
    for i in range(10):
        for j in range(10):
            cell_number = 100 - (i * 10 + (j if i % 2 == 0 else 9 - j))
            label = cells[i][j]
            bg_color = colors[(i + j) % 3]
            text = str(cell_number)

            if cell_number in cats:
                text += " üòæ"  # ‡πÉ‡∏ä‡πâ‡πÅ‡∏°‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏°‡∏ß
            elif cell_number in ladders:
                text += " ü™ú"

            label.config(text=text, bg=bg_color, fg="white")

            for idx, pos in enumerate(positions):
                if cell_number == pos:
                    label.config(bg=player_colors[idx], fg="white")  # ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

def reset_game():
    global positions, current_player
    positions = [1] * len(players)
    current_player = 0
    generate_cats_and_ladders()
    label_status.config(text=f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡∏∏‡∏ì‡∏´‡∏ô‡∏π {players[0]} ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô")
    label_dice.config(text="üò∫ ‡πÄ‡∏Ç‡∏¢‡πà‡∏≤‡πÅ‡∏°‡∏ß: -")
    button_roll.config(state="normal")
    update_board()


# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
root = tk.Tk()
root.title("‡πÄ‡∏Å‡∏°‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πÅ‡∏°‡∏ß‡∏°‡∏£‡∏ì‡∏∞")
root.geometry("650x750")
root.config(bg="#1a1a1a")  # ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡∏î‡∏≥

# ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡πÄ‡∏Å‡∏°
frame_board = tk.Frame(root, bg="#1a1a1a")
frame_board.pack(pady=10)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á 10x10
cells = []
for i in range(10):
    row = []
    for j in range(10):
        cell_number = 100 - (i * 10 + (j if i % 2 == 0 else 9 - j))
        label = tk.Label(
            frame_board, text=str(cell_number), width=4, height=2,
            borderwidth=2, relief="solid", font=("Arial", 12, "bold"),
            bg="#262626", fg="white"  # ‡∏™‡∏µ‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏ó‡∏ô‡∏î‡∏≥
        )
        label.grid(row=i, column=j, padx=1, pady=1)
        row.append(label)
    cells.append(row)

# ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
label_dice = tk.Label(root, text="üò∫ ‡πÄ‡∏Ç‡∏¢‡πà‡∏≤‡πÅ‡∏°‡∏ß: -", font=("Arial", 16), bg="#1a1a1a", fg="white")
label_dice.pack()

label_status = tk.Label(root, text="‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πÅ‡∏°‡∏ß‡∏°‡∏£‡∏ì‡∏∞! ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤...", font=("Arial", 16), bg="#1a1a1a", fg="white")
label_status.pack()

# ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤
button_roll = tk.Button(root, text="‡πÄ‡∏Ç‡∏¢‡πà‡∏≤‡πÅ‡∏°‡∏ß", command=roll_dice, font=("Arial", 14), bg="#333333", fg="white")
button_roll.pack(pady=5)

# ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
button_reset = tk.Button(root, text="‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà", command=reset_game, font=("Arial", 14), bg="#4d4d4d", fg="white")
button_reset.pack(pady=5)

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏°
root.after(100, setup_game)

# ‡πÄ‡∏£‡∏¥‡πà‡∏° UI 50 555000
root.mainloop()